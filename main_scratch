# main_scratch sections:
# 1: code harnesses
# 2: random bullshit

###############################
#          Section 1          #
###############################
# A: PlottingTools.mulliken_plot
# B: Output Equation for Specific D442 Structure
-------------------------------
# A
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/theoretical/"
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
    pt.mulliken_plot(file, filename="", energyshift=-1.3568, ymin=-1, ymax=4, substate=0, color_dict=cd, eq=True, debug=True)
    # n_3 experimental energyshift: -0.3635
    # n_3 theoretical energyshift:  -1.3568
-------------------------------
# B
    filepath = "../../FHI-aims/KellerPBE/D442/geo_comparison/total_energies/pbe_tight_ts_te"
    x = [0.80, 0.85, 0.90, 0.95, 1.00, 1.05, 1.10, 1.25, 1.50, 2.00]
    with open(filepath, "r") as f:
        lines = []
        for ln in f:
            lines.append(ln)
    i = 439
    order = 5
    y = [float(x) for x in lines[1 + i*11: (i+1)*11]]
    print(bf.minimize_func(bf.fit_poly(x, y, order)))
    print(kp.eq_form(bf.fit_poly(x, y, order)))
-------------------------------

###############################
#          Section 2          #
###############################

file1 = "../../FHI-aims/KellerPBE/all_geometries/xx_1.00.in"
file2 = "../../FHI-aims/KellerPBE/all_geometries/xx_1.50.in"
number = "07"
a = 2
b = 12
file1 = file1.replace("xx", number)
file2 = file2.replace("xx", number)
one = Basic.distance(file1, a, file1, b)
two = Basic.distance(file2, a, file2, b)
print(two/one)

# Fixed Problem Calcs: (D442x10 dataset)
# 3.09.08: 2.00 (pbe_tight_ts) -- fixed by setting charge_mix_param to 0.30
# 3.10.09: 0.85 (min_s, min_s_ts, min_s_1.02_50, min_s_1.00_70, min_s_m4) -- fixed by setting charge_mix_param to 0.30
# 3.10.09: 0.90 (min_s, min_s_ts, min_s_1.09_50, min_s_1.00_70, min_s_m4) -- fixed by setting charge_mix_param to 0.30

# Problem D442x10 Structures (labelled problem if error is greater than 0.50):
# 1.03.03 -- min_s biggest problem
# 1.07.78 -- problem with d>20
# 1.10.11 -- problem with d>20
# 2.05.20 -- min_s_m4 biggest problem
# 2.06.02 -- problem with d>20
# 3.11.08 -- problem with d>20
# 3.12.14 -- min_s_1.02_50 biggest problem
# 4.06.11 -- min_s biggest problem
# 4.16.05 -- problem with d>20
# 4.21.04 -- min_s BIGGEST PROBLEM > 300 !!!!

def min_lowest_quad(x, y):
    points = [[x[i], j] for i, j in enumerate(y)]
    low_1 = [10, 10]
    low_2 = [10, 10]
    low_3 = [10, 10]
    low_4 = [10, 10]
    low_5 = [10, 10]
    low_6 = [10, 10]
    for count, point in enumerate(points):
        if pt[1] < low_1[1]:
            low_6 = low_5
            low_5 = low_4
            low_4 = low_3
            low_3 = low_2
            low_2 = low_1
            low_1 = pt
        elif pt[1] < low_2[1]:
            low_6 = low_5
            low_5 = low_4
            low_4 = low_3
            low_3 = low_2
            low_2 = pt
        elif pt[1] < low_3[1]:
            low_6 = low_5
            low_5 = low_4
            low_4 = low_3
            low_3 = pt
        elif pt[1] < low_4[1]:
            low_6 = low_5
            low_5 = low_4
            low_4 = pt
        elif pt[1] < low_5[1]:
            low_6 = low_5
            low_5 = pt
        elif pt[1] < low_6[1]:
            low_6 = pt
    x_min = [low_1[0], low_2[0], low_3[0]]
    y_min = [low_1[1], low_2[1], low_3[1]]
    res = bf.minimize_func(bf.fit_poly(x_min, y_min, 2))
    print(eq_form(bf.fit_poly(x_min, y_min, 2)))
    print(res)
    if res < 0.8 or res > 1.2 or True:
        x_min.append(low_4[0])
        y_min.append(low_4[1])
        res = bf.minimize_func(bf.fit_poly(x_min, y_min, 3))
        print(eq_form(bf.fit_poly(x_min, y_min, 3)))
        print(res)
    if res < 0.8 or res > 1.2 or True:
        x_min.append(low_5[0])
        y_min.append(low_5[1])
        res = bf.minimize_func(bf.fit_poly(x_min, y_min, 4))
        print(eq_form(bf.fit_poly(x_min, y_min, 4)))
        print(res)
    if res < 0.8 or res > 1.2 or True:
        x_min.append(low_6[0])
        y_min.append(low_6[1])
        res = bf.minimize_func(bf.fit_poly(x_min, y_min, 5))
        print(eq_form(bf.fit_poly(x_min, y_min, 5)))
        print(res)
    return res

x = [0.80, 0.85, 0.90, 0.95, 1.00, 1.05, 1.10, 1.25, 1.50, 2.00]
y = [0.02140002698, 0.007480526983, -0.001020163007, -0.006705705018, -0.003773087024, -0.00201533502, -0.003865128034, 0.002481656993, -0.0002937420213, 0.0004280509893]
kp.min_lowest_quad(x, y)

    for a in at:
        i = 0
        at_ret.append([a[0], a[1], a[2]])
        for x in a:
            if x < 0:
                count += 1
                at_ret[j][0] += lv[i][0]
                at_ret[j][1] += lv[i][1]
                at_ret[j][2] += lv[i][2]
            if x > lv[i][i]:
                count += 1
                at_ret[j][0] -= lv[i][0]
                at_ret[j][1] -= lv[i][1]
                at_ret[j][2] -= lv[i][2]
            i += 1
        j += 1

base = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/geo_exp.in"
opt1 = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/geo_exp_b.in"
opt2 = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/geo_exp_bb.in"
opt3 = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/geo_exp_bbb.in"
opt4 = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/geo_exp_bbbb.in"

bg.move_into_unit_cell(base, opt1)
bg.move_into_unit_cell(opt1, opt2)
bg.move_into_unit_cell(opt2, opt3)
bg.move_into_unit_cell(opt3, opt4)

structure = 0
# n_2_4 experimental: NOTE: change where dots are plotted to be % 16 and +8 % 16
if structure == 0:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/experimental/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_experimental.png"
    eshift = -2.2702
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
    labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
    title = "Experimental m=4, n=2"
    equal = True
    debug = False
# n_2_4 theoretical:
if structure == 1:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/theoretical/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_theoretical.png"
    eshift = -2.2211
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
    labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
    title = "Theoretical m=4, n=2"
    equal = True
    debug = False

# n_3 experimental: NOTE: change where dots are plotted to be % 4 and +2 % 4
if structure == 2:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_experimental.png"
    eshift = -0.3635
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
    labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
    title = "Experimental m=3, n=3"
    equal = True
    debug = False
# n_3 theoretical:
if structure == 3:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/theoretical/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_theoretical.png"
    eshift = -1.3568
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
    labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
    title = "Theoretical m=3, n=3"
    equal = True
    debug = False

# n_4 experimental: NOTE: change where dots are plotted to be % 4 and +2 % 4
if structure == 4:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_experimental.png"
    eshift = -1.2848
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
    labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
    title = "Experimental m=4, n=4"
    equal = True
    debug = False
# n_4 theoretical:
if structure == 5:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/theoretical/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_theoretical.png"
    eshift = -1.3466
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
    labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
    title = "Theoretical m=4, n=4"
    equal = True
    debug = False

# n_5 experimental: NOTE: change where dots are plotted to be % 4 and +2 % 4
if structure == 6:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/experimental/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_experimental.png"
    eshift = -2.0580
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
    labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
    title = "Experimental m=5, n=5"
    equal = True
    debug = False
# n_5 theoretical:
if structure == 7:
    file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/theoretical/"
    figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_theoretical.png"
    eshift = -2.2826
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
    labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
    title = "Theoretical m=5, n=5"
    equal = True
    debug = False
Geometry.bandProcess(file + "band1001.out", True, 0)

file_base = "../../FHI-aims/Yi_1_5_D/Results/New_Results/"
options = ["n_2_4/", "n_3/", "n_4/", "n_5/"]
for opt in options:
    temp = file_base + opt + "experimental/geometry.in"
    print(temp)
    temp = file_base + opt + "theoretical/geometry.in"
    print(temp)

# 1D Ethan Project
structure = 2
if structure == 2:
    file = "../../FHI-aims/1D_Ethan/2"
    figure_loc = "../../FHI-aims/1D_Ethan/2.png"
    eshift = -0.4913
    ymin = -1
    ymax = 5
    substate = 0
    cd = {"Bi": "m", "Br": "g", "N": "b", "C": "y", "H": "c"}
    labels = ('$\Gamma$', '$1\|\Gamma$', '$2\|\Gamma$', '$3\|4$', '$\Gamma$', '$5$')
    title = "1D Structure 2"
    equal = True
    debug = False

if structure == 3:
    file = "../../FHI-aims/1D_Ethan/3"
    figure_loc = "../../FHI-aims/1D_Ethan/3.png"
    eshift = -0.4233
    ymin = -1
    ymax = 4
    substate = 0
    cd = {"Bi": "m", "I": "g", "N": "b", "C": "y", "H": "c"}
    labels = ('$\Gamma$', '$1\|\Gamma$', '$2\|\Gamma$', '$3\|4$', '$\Gamma$', '$5$')
    title = "1D Structure 3"
    equal = True
    debug = False

setting = 0
# settings:
# -> 0: do nothing
# -> 1: run a set of s66 structures and generate output
# -> 2: plot a given structure from s66
# -> 3: find next node to evaluate S66 for Bayesian optimization
# -> 4: d442 run of structures
# -> 5: binding energies of d442 calculation
# -> 6: plot dos of n_3 experimental atom projected dos
# -> 7: histogram for D442x10
# -> 8: histogram for S66x21
# -> 9: plot a given structure from d442

if setting == 1:
    poss = [["1.01", "20"], ["1.02", "20"]]
    base = "../../FHI-aims/KellerPBE/S66/blyp/geos_"
    control = "../../FHI-aims/KellerPBE/control_files/control_blyp_ts.in"
    # tight_defaults = "../../FHI-aims/Repository/species_defaults/defaults_2020/tight/"
    min_defaults = "../../FHI-aims/Repository/species_defaults/min_s_defaults/"
    kp.s66x21_run(poss, base, control, min_defaults, ignore=False, write_control=True)

if setting == 2:
    pbe_tight = "../../FHI-aims/KellerPBE/S66/dissociation_curves/pbe_tight/"
    pbe_tight_ts = "../../FHI-aims/KellerPBE/S66/dissociation_curves/pbe_tight_ts/"
    min_s = "../../FHI-aims/KellerPBE/S66/dissociation_curves/min_s/"
    blyp_min = "../../FHI-aims/KellerPBE/S66/blyp/geos_min_s/"
    series = [pbe_tight, pbe_tight_ts, min_s, blyp_min]
    for i in range(66):
        kp.plot_dissociation_curve_s66(series, i + 1)

if setting == 3:
    file = "../../FHI-aims/KellerPBE/info/d_sr_opt.txt"
    bo.next_node(file)

if setting == 4:
    poss = ["blyp_min_s/"]
    base = "../../FHI-aims/KellerPBE/D442/geo_comparison/"
    commands = [""]
    control = "../../FHI-aims/KellerPBE/control_files/control_blyp.in"
    # control_ts = "../../FHI-aims/KellerPBE/control_files/control_pbe_ts.in"
    pbe_tight_defaults = "../../FHI-aims/Repository/species_defaults/defaults_2020/tight/"
    min_defaults = "../../FHI-aims/Repository/species_defaults/min_s_defaults/"
    defaults = [min_defaults]

    kp.d442x10_run(poss, base, commands, control, defaults, ignore=False, write_control=False)

if setting == 5:
    folder_1 = "../../FHI-aims/KellerPBE/D442/geo_comparison/pbe_tight_ts/"
    folder_2 = "../../FHI-aims/KellerPBE/D442/geo_comparison/min_s/"
    folder_3 = "../../FHI-aims/KellerPBE/D442/geo_comparison/min_s_ts/"
    folder_4 = "../../FHI-aims/KellerPBE/D442/geo_comparison/min_s_1.02_50/"
    folders = [folder_1, folder_2, folder_3, folder_4]
    for file in folders:
        temp = file + "binding_energies.txt"
        # kp.binding_energies(file, temp)
        res = kp.determine_all_minima_d442(temp, option=2)
        print(temp)
        for r in res:
            print(r)
        print()

if setting == 6:
    file_base = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental_atom_proj/atom_proj_dos_I0"
    all_numbers = [3, 4, 5, 6, 7, 8, 9, 10, 56, 57, 58, 59, 60, 61, 62, 63, 109, 110, 111, 112, 113, 114, 115, 116, 163,
                   164, 165, 166, 167, 168, 169, 170]
    interstitial_numbers = [10, 63, 116, 170]
    non_interstitial_num = [3, 4, 5, 6, 7, 8, 9, 56, 57, 58, 59, 60, 61, 62, 109, 110, 111, 112, 113, 114, 115, 163,
                            164, 165, 166, 167, 168, 169]
    numbers = non_interstitial_num
    files = []
    suffix = ".dat"
    # big contrib:
    # 10
    # 63
    # 116
    # 170
    for n in numbers:
        if n >= 100:
            files.append(file_base + str(n) + suffix)
        elif n >= 10:
            files.append(file_base + "0" + str(n) + suffix)
        else:
            files.append(file_base + "00" + str(n) + suffix)
    pt.dos_plot(files)

if setting == 7:
    base = "../../FHI-aims/KellerPBE/D442/geo_comparison/"
    base2 = "../../FHI-aims/KellerPBE/D442/sr_opt/"
    poss = ["min_s/", "min_s_ts/", "min_s_m4/", "min_s_1.00_70/", "min_s_095/", "min_s_100/"]
    series = []
    for p in poss:
        series.append(base + p)
    comparison = base + "pbe_tight_ts/"
    kp.plot_d442_histogram([base2 + poss[5]], comparison)

if setting == 8:
    pbe_tight_ts = "../../FHI-aims/KellerPBE/dissociation_curves/pbe_tight_ts/"
    min_s = "../../FHI-aims/KellerPBE/dissociation_curves/min_s/"
    min_s_ts = "../../FHI-aims/KellerPBE/dissociation_curves/min_s_ts/"
    min_s_opt = "../../FHI-aims/KellerPBE/d_sr_optimization/geos_1.00_70/"
    series = [min_s, min_s_ts, min_s_opt]
    kp.plot_s66_histogram(series, pbe_tight_ts)

if setting == 9:
    base = "../../FHI-aims/KellerPBE/D442/geo_comparison/"
    # pbe_tight = "pbe_tight/"
    blyp_min_s = "blyp_min_s/"
    pbe_tight_ts = "pbe_tight_ts/"
    min_s = "min_s/"
    min_s_d_sr_opt = "min_s_1.00_70/"
    ends = [blyp_min_s, pbe_tight_ts, min_s, min_s_d_sr_opt]
    series = []
    for e in ends:
        series.append(base + e)
    for i in range(1, 442):
        kp.plot_dissociation_curve_d442(series, i)

folder = "../../FHI-aims/Double_Perovskites/AgBi-Perovskites/ideal/disturbed_positions/setup/"
disturbances = [0.05, 0.10, 0.15, 0.20]
base = folder + "geometry_base.in"
new_folder = folder[:-6]
for disturb in disturbances:
    entry = new_folder + str(int(disturb * 100)) + "/"
    for i in range(10):
        write_file = entry + str(i) + "/geometry.in"
        bg.disturb_positions(base, write_file, disturb)

# n_2_4 experimental:
    if structure == 0:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_experimental.png"
        eshift = -2.2702
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
        title = "Experimental m=4, n=2"
        equal = True
        debug = False
    # n_2_4 theoretical:
    if structure == 1:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_theoretical.png"
        eshift = -2.2211
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
        title = "Theoretical m=4, n=2"
        equal = True
        debug = False

    # n_3 experimental:
    if structure == 2:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_experimental.png"
        eshift = -0.3635
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
        title = "Experimental m=3, n=3"
        equal = True
        debug = False
    # n_3 theoretical:
    if structure == 3:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_theoretical.png"
        eshift = -1.3568
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
        title = "Theoretical m=3, n=3"
        equal = True
        debug = False

    # n_4 experimental:
    if structure == 4:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_experimental.png"
        eshift = -1.2848
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
        labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
        title = "Experimental m=4, n=4"
        equal = True
        debug = False
    # n_4 theoretical:
    if structure == 5:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_theoretical.png"
        eshift = -1.3466
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
        labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
        title = "Theoretical m=4, n=4"
        equal = True
        debug = False

    # n_5 experimental:
    if structure == 6:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_experimental.png"
        eshift = -2.0580
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
        title = "Experimental m=5, n=5"
        equal = True
        debug = False
    # n_5 theoretical:
    if structure == 7:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_theoretical.png"
        eshift = -2.2826
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
        title = "Theoretical m=5, n=5"
        equal = True
        debug = False
    pt.mulliken_plot(file, figure_loc, eshift, ymin, ymax, substate, cd, labels, title, equal, debug)

for structure in range(8):
    # n_2_4 experimental:
    if structure == 0:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_experimental.png"
        eshift = -2.2702
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
        title = "Experimental m=4, n=2"
        equal = True
        debug = False
    # n_2_4 theoretical:
    if structure == 1:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_2_4_theoretical.png"
        eshift = -2.2211
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|3$', '$\Gamma$', "$4'\|\Gamma$", '$5$')
        title = "Theoretical m=4, n=2"
        equal = True
        debug = False

    # n_3 experimental:
    if structure == 2:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_experimental.png"
        eshift = -0.3635
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
        title = "Experimental m=3, n=3"
        equal = True
        debug = False
    # n_3 theoretical:
    if structure == 3:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_3_theoretical.png"
        eshift = -1.3568
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', "$5'\|\Gamma$", '$6$')
        title = "Theoretical m=3, n=3"
        equal = True
        debug = False

    # n_4 experimental:
    if structure == 4:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_experimental.png"
        eshift = -1.2848
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
        labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
        title = "Experimental m=4, n=4"
        equal = True
        debug = False
    # n_4 theoretical:
    if structure == 5:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_4_theoretical.png"
        eshift = -1.3466
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "F": "k"}
        labels = ('$1$', '$\Gamma$', "$2'\|\Gamma$", '$3\|\Gamma$', '$4\|\Gamma$', '$5$')
        title = "Theoretical m=4, n=4"
        equal = True
        debug = False

    # n_5 experimental:
    if structure == 6:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/experimental/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_experimental.png"
        eshift = -2.0580
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
        title = "Experimental m=5, n=5"
        equal = True
        debug = False
    # n_5 theoretical:
    if structure == 7:
        file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/theoretical/"
        figure_loc = "../../FHI-aims/Yi_1_5_D/Results/Figures/New_Figures/n_5_theoretical.png"
        eshift = -2.2826
        ymin = -1
        ymax = 4
        substate = 0
        cd = {"Pb": "m", "I": "g", "N": "b", "C": "y", "H": "c", "S": "k", "O": "r"}
        labels = ('$1$', '$\Gamma$', '$2\|\Gamma$', '$3\|\Gamma$', '$4\|\Gamma$', '$5\|\Gamma$', "$6'$")
        title = "Theoretical m=5, n=5"
        equal = True
        debug = False
    # pt.mulliken_plot(file, figure_loc + ".ne.png", eshift, ymin, ymax, substate, cd, labels, title, eq=False, debug=False)

Transitions a-b and c-d are isothermal processes meaning their work is defined by Equation 5.2. Given the approximation that internal energy is a function purely of temperature, $\Delta U=0$ for these processes and from Equation 5.4, their heat equals their work. Transitions b-c and d-a are isobaric processed meaning their work is defined by Equation 5.3. Their internal energy can be computed as $\Delta U_{12}=m(u_2-u_1)$ and thus, from Equation 5.4, we can compute their heat added as $Q=W-\Delta U$. Thus, we generate the following heat and work data for our four cycle heat engine:

geo = base + "Double_Perovskites/AgBi-Perovskites/ideal/disturbed_positions/python_dist_positions/"
corners_ag1 = [14, 17, 18, 20, 22, 26]
shiftmap_ag1 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
center_ag1 = 2
corners_ag2 = [13, 15, 16, 19, 21, 25]
shiftmap_ag2 = [[0, 0, 0], [0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]]
center_ag2 = 1

corners_bi1 = [14, 15, 16, 20, 23, 27]
shiftmap_bi1 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]]
center_bi1 = 3

corners_bi2 = [13, 17, 19, 18, 24, 28]
shiftmap_bi2 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]]
center_bi2 = 4

disturbs = ["5/", "10/", "15/", "20/"]
for dist in disturbs:
    print(dist)
    parent = geo + dist
    for i in range(10):
        current = parent + str(i) + "/geometry.in"
        res = bg.maurer_displacement(current, corners_bi2, shiftmap_bi2, center_bi2)
        print(f'%.10f %.10f' % (res[0], res[1]))

team_proj_2 = "../../Documents/23-24/ME321/ExactoCompressionTest_Results"
numbers = [1, 2, 3, 4, 6]
numbers = [str(x) for x in numbers]
colors = ['r', 'orange', 'y', 'g', 'b']
i = 0
for num in numbers:
    ots.me321_team_proj_2(team_proj_2 + num + ".txt", colors[i])
    i += 1
plt.title("Force v. Displacement")
plt.legend(["Run 1", "Run 2", "Run 3", "Run 4", "Run 5"])
plt.xlabel("Displacement (mm)")
plt.ylabel("Force (N)")
plt.grid()
plt.show()


folder = "../../FHI-aims/Double_Perovskites/AgBi-Perovskites/ideal/disturbed_positions/python_dist_positions/"
disturbs = ["5/", "10/", "15/", "20/"]

if True:
    corners_ag1 = [20, 17, 14, 18, 26, 22]
    shiftmap_ag1 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
    center_ag1 = 2

    corners_ag2 = [13, 15, 16, 19, 21, 25]
    corners_sig_ag2 = [13, 16, 19, 15, 25, 21]
    shiftmap_ag2 = [[0, 0, 0], [0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]]
    center_ag2 = 1

    corners_bi1 = [14, 15, 16, 20, 23, 27]
    corners_sig_bi1 = [14, 15, 20, 16, 27, 23]
    shiftmap_bi1 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]]
    center_bi1 = 3

    corners_bi2 = [13, 17, 19, 18, 24, 28]
    corners_sig_bi2 = [19, 18, 13, 17, 28, 24]
    shiftmap_bi2 = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]]
    center_bi2 = 4

    beta_1 = [2, 14, 3]
    shiftmap_1 = -1
    beta_2 = [3, 20, 2]
    shiftmap_2 = [[0, 0, 0], [1, 0, 0], [1, 0, 0]]
    beta_3 = [2, 17, 4]
    shiftmap_3 = -1
    beta_4 = [3, 15, 1]
    shiftmap_4 = -1
    beta_5 = [4, 13, 1]
    shiftmap_5 = -1
    beta_6 = [1, 19, 4]
    shiftmap_6 = [[0, 0, 0], [1, 0, 0], [1, 0, 0]]
    beta_7 = [4, 18, 2]
    shiftmap_7 = [[0, 0, 0], [0, 1, 0], [0, 1, 0]]
    beta_8 = [1, 16, 3]
    shiftmap_8 = [[0, 0, 0], [0, 1, 0], [0, 1, 0]]

    betas = [beta_1, beta_2, beta_3, beta_4, beta_5, beta_6, beta_7, beta_8]
    shifts = [shiftmap_1, shiftmap_2, shiftmap_3, shiftmap_4, shiftmap_5, shiftmap_6, shiftmap_7, shiftmap_8]
    directions = [-1, 1, -1, 1, 1, -1, 1, -1]

for dist in disturbs:
    break
    # print(dist)
    temp = folder + dist
    for i in range(10):
        current = temp + str(i) + "/"
        for j in range(9, 10):
            # band = "band100" + str(j) + ".out"
            results = ""
            for k in range(8):
                results += str(bg.angle_info(current + "geometry.in", betas[k], shifts[k], directions[k])[2]) + " "
                # print(f'%.10f' % (res[0]))
            print(results)
            # print(f'%0.10f' % bg.delta_d(current + "geometry.in", center_bi2, corners_sig_bi2, debug=False))
            # print(f'%0.10f' % bg.sigma_squared(current + "geometry.in", center_bi2, corners_sig_bi2, debug=False))
            # bbo.band_info(current, band, band_gap=True, spin_splitting=True, verbose=False)

folder = "../../FHI-aims/Yi_1_5_D/band_plotting_folder/"
structures_th = ["n_5_theoretical/", "n_4_theoretical/", "n_3_theoretical/", "n_2_4_theoretical/"]
structures_ex = ["n_5_experimental/", "n_4_experimental/", "n_3_experimental/", "n_2_4_experimental/"]

j = -1
band_nums = [8, 7, 8, 7]
for struct in structures_ex:
    break
    j += 1
    parent = folder + struct
    print(parent)
    for i in range(band_nums[j]):
        eff_masses = []
        band = f'band%d.out' % i
        results = bbo.band_info(parent, band, band_gap=True, spin_splitting=True, verbose=False).split()
        eff_masses.append(bbo.band_info(parent, band, effective_mass=True, steps=1, verbose=False))
        eff_masses.append(bbo.band_info(parent, band, effective_mass=True, steps=2, verbose=False))
        eff_masses.append(bbo.band_info(parent, band, effective_mass=True, steps=3, verbose=False))
        eff_masses.append(bbo.band_info(parent, band, effective_mass=True, steps=4, verbose=False))
        eff_masses.append(bbo.band_info(parent, band, effective_mass=True, steps=5, verbose=False))
        eff_masses = [float(x) for x in eff_masses]
        eff_masses.sort()
        results.append(eff_masses[2])
        results = [float(x) for x in results]
        print(f'%.6f %.6f %.6f' % (results[0], results[1], results[2]))

base = "../../FHI-aims/Double_Perovskites/AgBi-Perovskites/Maurer2/"
for i in range(11):
    temp = f'%s%02d/geometry.in' % (base, (i * 5))
    # res = bbo.band_info(temp, "band1006.out", band_gap=True, spin_splitting=True, verbose=False)
    # angle1 = bg.angle_info(temp, (3, 9, 1), ((0, 0, 0), (0, 0, 0), (0, 0, 0)), 0)[0]
    # angle2 = bg.angle_info(temp, (1, 5, 2), ((0, 0, 0), (0, 0, 0), (0, 0, 0)), 0)[0]
    # delta_beta = (360 - ((angle2 + angle1) / 2)) - ((angle2 + angle1) / 2)
    # print(delta_beta)


# Determination of geometric parameters:
# order of corners is left, down, right, up, below, above
# ag1 is bottom left, bi1 is bottom right

# 180 Degree, IP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (7, 8, 10, 9, 18, 17)
center_ag1 = 3

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (5, 6, 12, 11, 16, 15)
center_ag2 = 2

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (10, 11, 7, 6, 20, 19)
center_bi1 = 4

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (12, 9, 5, 8, 14, 13)
center_bi2 = 1

# 170, 160, 150 Degrees, IP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (2, 3, 5, 4, 7, 6)
center_ag1 = 1

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (14, 9, 15, 10, 20, 19)
center_ag2 = 18

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (5, 10, 2, 9, 12, 11)
center_bi1 = 8

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (15, 4, 14, 3, 17, 16)
center_bi2 = 13

# 180 Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (7, 8, 26, 25, 14, 13)
center_ag1 = 3

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (5, 6, 28, 27, 12, 11)
center_ag2 = 2

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (26, 27, 7, 6, 16, 15)
center_bi1 = 4

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (28, 25, 5, 8, 10, 9)
center_bi2 = 1

# 170 (non-170) Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (10, 11, 26, 25, 13, 12)
center_ag1 = 9

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (2, 3, 28, 27, 5, 4)
center_ag2 = 1

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (26, 27, 10, 3, 16, 15)
center_bi1 = 14

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (28, 25, 2, 11, 8, 7)
center_bi2 = 6

# 170_170 Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (12, 14, 13, 8, 16, 15)
center_ag1 = 11

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (2, 3, 6, 18, 5, 4)
center_ag2 = 1

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (13, 18, 12, 3, 20, 19)
center_bi1 = 17

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (6, 8, 2, 14, 10, 9)
center_bi2 = 7

# 160 (non-160) Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (2, 3, 18, 17, 5, 4)
center_ag1 = 1

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (10, 14, 20, 19, 16, 15)
center_ag2 = 13

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (18, 19, 2, 14, 8, 7)
center_bi1 = 6

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (20, 17, 10, 3, 12, 11)
center_bi2 = 9

# 160_160 Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (3, 5, 4, 2, 7, 6)
center_ag1 = 1

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (14, 18, 13, 9, 20, 19)
center_ag2 = 17

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (4, 9, 3, 18, 11, 10)
center_bi1 = 8

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (13, 2, 14, 5, 16, 15)
center_bi2 = 12

# 150 (non-150) Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (2, 3, 26, 25, 5, 4)
center_ag1 = 1

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (10, 14, 28, 27, 16, 15)
center_ag2 = 13

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (26, 27, 2, 14, 8, 7)
center_bi1 = 6

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (28, 25, 10, 3, 12, 11)
center_bi2 = 9

# 150_150 Degree, OOP:

shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (3, 5, 4, 2, 7, 6)
center_ag1 = 1

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (14, 18, 13, 9, 20, 19)
center_ag2 = 17

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (4, 9, 3, 18, 11, 10)
center_bi1 = 8

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (13, 2, 14, 5, 16, 15)
center_bi2 = 12

# Maurer
shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = (7, 8, 10, 9, 18, 17)
center_ag1 = 3

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = (5, 6, 12, 11, 16, 15)
center_ag2 = 2

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = (10, 11, 7, 6, 20, 19)
center_bi1 = 4

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = (12, 9, 5, 8, 14, 13)
center_bi2 = 1

# blank
shifts_ag1 = [[0, 0, 0] for x in range(6)]
corners_ag1 = ()
center_ag1 =

shifts_ag2 = [[0, 0, 0] for x in range(6)]
shifts_ag2[2] = [1, 0, 0]
shifts_ag2[3] = [0, 1, 0]
corners_ag2 = ()
center_ag2 =

shifts_bi1 = [[0, 0, 0] for x in range(6)]
shifts_bi1[2] = [1, 0, 0]
corners_bi1 = ()
center_bi1 =

shifts_bi2 = [[0, 0, 0] for x in range(6)]
shifts_bi2[3] = [0, 1, 0]
corners_bi2 = ()
center_bi2 =

# BZ plotting code for m=4, n=4
corner_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/BZ_corners.in"
corners = np.asarray(bf.read_BZ_corners(corner_file))
adjacency = [[1, 6, 8], [7, 9], [3, 4, 10], [5, 11], [6, 5], [7], [7],
             [], [9, 10], [11], [11], []]
pathway_exp = [[0, 0.5, 0, 0, 0, 0],
           [-0.41216031, 0.21398791, 0.67943786, 0, 0, 0],
           [0, 0, 0, 0.41216031, 0.21398791, -0.67943786],
           [0, 0, 0, -0.4358056479, 0, 0.6410465853],
           [0, 0, 0, 0.1899306382, 0, 0.4173119146]]
pathway_theo = [[-0.000006496415069, 0.5, 0.000006634790866, 0, 0, 0],
                [-0.42222215, 0.21398549, 0.65800129, 0, 0, 0],
                [0, 0, 0, 0.42221658, 0.21400477, -0.65799561],
                [0, 0, 0, -0.4401418105, 0.000001154439359, 0.6215919761],
                [0, 0, 0, 0.2032369749, 0.00000001405307422, 0.4128421789]]
names = [['Γ', '1'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
geo_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/geometry.in"
pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway, names, save=True)

# BZ plotting code for m=2, n=4
corner_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/experimental/BZ_corners.in"
corners = np.asarray(bf.read_BZ_corners(corner_file))
adjacency = [[1, 4], [3, 5], [0, 6], [2, 7], [5], [7], [4], [6]]
pathway = [[0.5, 0, 0, 0, 0, 0],
           [0.11365615, -0.00140814, 0.5, 0, 0, 0],
           [0, 0, 0, 0.11365615, 0.00140814, -0.5],
           [0, 0, 0, 0, 0, 0.5],
           [0, 0, 0, 0, 0.5, 0]]
pathway_theo = [[0.5, 0.0000287604, -0.0000011029, 0, 0, 0],
                [0.111032555, 0.018854093, 0.500001225, 0, 0, 0],
                [0, 0, 0, 0.111032886, -0.018851353, -0.49999872],
                [0, 0, 0, 0.0000004035, -0.0000004732, 0.5],
                [0, 0, 0, -0.0000019468, 0.5, -0.0000000568]]
names = [['1', 'Γ'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
geo_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_2_4/experimental/geometry.in"
pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway, names, save=True)

# BZ plotting code for m=3, n=3
corner_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental/BZ_corners.in"
corners = np.asarray(bf.read_BZ_corners(corner_file))
adjacency = [[1, 6, 8], [7, 9], [3, 4, 10], [5, 11], [6, 5], [7], [7],
             [], [9, 10], [11], [11], []]
pathway_exp = [[0, 0.5, 0, 0, 0, 0],
           [0.19182883, -0.20848921, -0.55404977, 0, 0, 0],
           [0, 0, 0, 0.19182883, 0.21647380, -0.55404977],
           [0, 0, 0, -0.4173627635, 0, 0.6175963143],
           [0, 0, 0, 0.2338708863, 0, 0.4341044371]]
pathway_theo = [[0.0000234202775, 0.5000000062, 0.0001273666518, 0, 0, 0],
                [0.18908264, -0.209803154, -0.55519596, 0, 0, 0],
                [0, 0, 0, 0.189102628, 0.216933749, -0.555087256],
                [0, 0, 0, -0.4075564363, 0.00001701318456, 0.6188502559],
                [0, 0, 0, 0.2235231191, 0.00002467970504, 0.4348169387]]
names = [['1', 'Γ'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
geo_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_3/experimental/geometry.in"
pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway, names, save=True)

# BZ plotting code for m=5, n=5
corner_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/experimental/BZ_corners.in"
corners = np.asarray(bf.read_BZ_corners(corner_file))
adjacency = [[1, 6, 8], [7, 9], [3, 4, 10], [5, 11], [6, 5], [7], [7],
             [], [9, 10], [11], [11], []]
pathway_exp = [[0, 0.5, 0, 0, 0, 0],
           [-0.42151859, 0.21853893, -0.41079894, 0, 0, 0],
           [0, 0, 0, -0.42151859, -0.22182749, -0.41079894],
           [0, 0, 0, 0.3313480044, 0, 0.4298806893],
           [0, 0, 0, -0.08894081792, 0, 0.5188215072]]
pathway_theo = [[-0.000067637355, 0.5000000056, -0.000120866122, 0, 0, 0],
                [-0.43131418, 0.21794344, -0.4090992, 0, 0, 0],
                [0, 0, 0, -0.43125545, -0.21620539, -0.40899426],
                [0, 0, 0, 0.3390895438, -0.000022592074, 0.4307783116],
                [0, 0, 0, -0.086977208, -0.000014485761, 0.5177555196]]
names = [['1', 'Γ'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
geo_file = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_5/experimental/geometry.in"
pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway, names, save=True)

# BZ plotting code for m=4, n=6
corner_file = "../../FHI-aims/Yi/Yi_1_5_D/n_4_6/bands/experimental/BZ_corners.in"
corners = np.asarray(bf.read_BZ_corners(corner_file))
adjacency = [[1, 6, 8], [7, 9], [3, 4, 10], [5, 11], [6, 5], [7], [7],
             [], [9, 10], [11], [11], []]
pathway = [[0, 0.5, 0, 0, 0, 0],
           [-0.42151859, 0.21853893, -0.41079894, 0, 0, 0],
           [0, 0, 0, -0.42151859, -0.22182749, -0.41079894],
           [0, 0, 0, 0.3313480044, 0, 0.4298806893],
           [0, 0, 0, -0.08894081792, 0, 0.5188215072]]
names = [['1', 'Γ'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
geo_file = "../../FHI-aims/Yi/Yi_1_5_D/n_4_6/bands/experimental/geometry.in"
pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway, names, save=False, setup=False)

# DOS plot 1.5D m=4, n=4 structure
folder = "../../FHI-aims/Yi_1_5_D/Results/New_Results/n_4/experimental/"
elements = ["C", "F", "H", "I", "N", "Pb"]
files = []
for elem in elements:
    temp = folder + elem + "_l_proj_dos_raw.dat"
    files.append(temp)
# pt.dos_plot(files, shift=6.29, limits=[-1, 4], save=True)

# m=3, n=3 rename
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_3_theoretical/"
file = folder + "settings_plane.in"
Pb1_list = (1, 2, 108)
Pb2_list = (55, 161, 162)
I1_list = (3, 4, 5, 6, 7, 8, 9, 109, 110, 111, 112, 113, 114, 115)
I2_list = (56, 57, 58, 59, 60, 61, 62, 163, 164, 165, 166, 167, 168, 169)
base = folder + "geometry.in"
new_loc = folder + "../plane_geos/n_3_theoretical/geometry.in"
bg.rename_species(base, new_loc, Pb1_list, "Pb", "Pb1")
bg.rename_species(new_loc, new_loc, Pb2_list, "Pb", "Pb2")
bg.rename_species(new_loc, new_loc, I1_list, "I", "I1")
bg.rename_species(new_loc, new_loc, I2_list, "I", "I2")

# m=4, n=4 rename
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_4_theoretical/"
Pb1_list = (1, 2, 7, 8)
Pb2_list = (3, 4, 5, 6)
I1_list = (16, 20, 36, 30, 22, 18, 26, 32, 10, 9, 25, 31, 17, 21, 29, 15, 19, 35)
I2_list = (23, 11, 13, 37, 39, 33, 41, 44, 27, 28, 43, 42, 34, 40, 38, 14, 12, 24)
base = folder + "geometry.in"
new_loc = folder + "../plane_geos/n_4_theoretical/geometry.in"
bg.rename_species(base, new_loc, Pb1_list, "Pb", "Pb1")
bg.rename_species(new_loc, new_loc, Pb2_list, "Pb", "Pb2")
bg.rename_species(new_loc, new_loc, I1_list, "I", "I1")
bg.rename_species(new_loc, new_loc, I2_list, "I", "I2")

# m=4, n=6 rename
# note Pb1/I1 is 4-wide plane, Pb2/I2 is 6-wide plane
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_4_6_experimental/"
Pb1_list = (1, 2, 7, 8)
Pb2_list = (3, 4, 5, 6, 9, 10)
I1_list = (44, 34, 36, 20, 16, 12, 40, 14, 25, 26, 13, 39, 15, 11, 35, 19, 33, 43)
I2_list = (21, 37, 52, 18, 32, 24, 48, 28, 30, 50, 54, 42, 46, 45, 41, 49, 53, 27, 29, 47, 23, 31, 17, 38, 51, 22)
base = folder + "geometry.in"
new_loc = folder + "../plane_geos/n_4_6_experimental/geometry.in"
bg.rename_species(base, new_loc, Pb1_list, "Pb", "Pb1")
bg.rename_species(new_loc, new_loc, Pb2_list, "Pb", "Pb2")
bg.rename_species(new_loc, new_loc, I1_list, "I", "I1")
bg.rename_species(new_loc, new_loc, I2_list, "I", "I2")

# m=2, n=4 rename
# note Pb1/I1 is 2-wide plane, Pb2/I2 is 4-wide plane
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_2_4_theoretical/"
Pb1_list = (5, 6, 7, 8)
Pb2_list = (1, 2, 3, 4, 9, 10, 11, 12)
I1_list = (30, 60, 20, 48, 44, 41, 45, 17, 57, 29, 31, 59, 19, 47, 43, 42, 46, 18, 58, 32)
I2_list = (25, 13, 37, 33, 21, 65, 49, 61, 53, 64, 56, 68, 52, 24, 36, 40, 16, 28, 26, 14, 38, 22, 34, 66, 50, 62,
           54, 55, 63, 67, 51, 23, 35, 39, 15, 27)
base = folder + "geometry.in"
new_loc = folder + "../plane_geos/n_2_4_theoretical/geometry.in"
bg.rename_species(base, new_loc, Pb1_list, "Pb", "Pb1")
bg.rename_species(new_loc, new_loc, Pb2_list, "Pb", "Pb2")
bg.rename_species(new_loc, new_loc, I1_list, "I", "I1")
bg.rename_species(new_loc, new_loc, I2_list, "I", "I2")

# m=5, n=5 rename
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_5_experimental/"
Pb1_list = (82, 83, 245, 246, 247)
Pb2_list = (1, 2, 165, 163, 164)
I1_list = (92,  94, 93, 91, 90, 88, 87, 89, 84, 86, 249, 85, 248, 250, 251, 253, 252, 254, 255, 257, 258, 256)
I2_list = (3,   5,  8,  6,  9,  7,  12, 10, 11, 13, 174, 176, 173, 175, 172, 170, 169, 171, 168, 166, 4, 167)
base = folder + "geometry.in"
new_loc = folder + "../plane_geos/n_5_experimental/geometry.in"
# bg.rename_species(base, new_loc, Pb1_list, "Pb", "Pb1")
# bg.rename_species(new_loc, new_loc, Pb2_list, "Pb", "Pb2")
# bg.rename_species(new_loc, new_loc, I1_list, "I", "I1")
# bg.rename_species(new_loc, new_loc, I2_list, "I", "I2")

# pt.mulliken_plot("../../FHI-aims/Bi_substitution/Output/settings_final.in", save=False)
dos_folder = "../../FHI-aims/Bi_substitution/Output/"
file = "../../FHI-aims/Bi_substitution/Output/dos.png"
# pt.dos_plot(dos_folder, shift=1.1, limits=[-1, 3], save=True, title="pDOS", filename=file)

# 05/09/2024
set = "20"
base = f'../../FHI-aims/Double_Perovskites/AgBi-Perovskites/ideal/disturbed_positions/python_dist_positions/%s/' % set
maurer = True
sig_sq = True
delta_d = True
spin_sp = True
debug = False

for i in [10, 11]:
    break
    res = ""
    folder = f'%s%d/' % (base, i)
    geo = folder + "geometry.in"
    control = folder + "control.in"

    shifts_ag1 = [[0, 0, 0] for x in range(6)]
    corners_ag1 = (20, 18, 14, 17, 22, 26)
    center_ag1 = 2

    shifts_ag2 = [[0, 0, 0] for x in range(6)]
    shifts_ag2[2] = [1, 0, 0]
    shifts_ag2[3] = [0, 1, 0]
    corners_ag2 = (13, 15, 19, 16, 21, 25)
    center_ag2 = 1

    shifts_bi1 = [[0, 0, 0] for x in range(6)]
    shifts_bi1[2] = [1, 0, 0]
    corners_bi1 = (14, 16, 20, 15, 23, 27)
    center_bi1 = 3

    shifts_bi2 = [[0, 0, 0] for x in range(6)]
    shifts_bi2[3] = [0, 1, 0]
    corners_bi2 = (19, 17, 13, 18, 24, 28)
    center_bi2 = 4

    if maurer:
        maurer1_ag1, maurer2_ag1 = bg.maurer_displacement(geo, corners_ag1, shifts_ag1, center_ag1, Ag=True)
        maurer1_ag2, maurer2_ag2 = bg.maurer_displacement(geo, corners_ag2, shifts_ag2, center_ag2, Ag=True)
        maurer1_bi1, maurer2_bi1 = bg.maurer_displacement(geo, corners_bi1, shifts_bi1, center_bi1, Ag=False)
        maurer1_bi2, maurer2_bi2 = bg.maurer_displacement(geo, corners_bi2, shifts_bi2, center_bi2, Ag=False)
        if debug:
            print(f'Maurer for %s' % geo)
            print(maurer1_ag1)
            print(maurer1_ag2)
            print(maurer1_bi1)
            print(maurer1_bi2)
            print(maurer2_ag1)
            print(maurer2_ag2)
            print(maurer2_bi1)
            print(maurer2_bi2)
        else:
            maurer1_ag_avg = 0.5 * (maurer1_ag1 + maurer1_ag2)
            maurer1_bi_avg = 0.5 * (maurer1_bi1 + maurer1_bi2)
            maurer1_avg = 0.5 * (maurer1_ag_avg + maurer1_bi_avg)
            maurer2_ag_avg = 0.5 * (maurer2_ag1 + maurer2_ag2)
            maurer2_bi_avg = 0.5 * (maurer2_bi1 + maurer2_bi2)
            maurer2_avg = 0.5 * (maurer2_ag_avg + maurer2_bi_avg)
            res += f'%0.10f %0.10f %0.10f %0.10f %0.10f ' % (maurer1_ag_avg, maurer1_bi_avg, maurer2_ag_avg,
                                                             maurer2_bi_avg, max(maurer1_avg, maurer2_avg))

    if sig_sq:
        sig_sq_ag1 = bg.sigma_squared(geo, corners_ag1, shifts_ag1, center_ag1)
        sig_sq_ag2 = bg.sigma_squared(geo, corners_ag2, shifts_ag2, center_ag2)
        sig_sq_bi1 = bg.sigma_squared(geo, corners_bi1, shifts_bi1, center_bi1)
        sig_sq_bi2 = bg.sigma_squared(geo, corners_bi2, shifts_bi2, center_bi2)
        if debug:
            print(f'Sigma Squared for %s' % geo)
            print(sig_sq_ag1)
            print(sig_sq_ag2)
            print(sig_sq_bi1)
            print(sig_sq_bi2)
        else:
            sig_sq_ag_avg = 0.5 * (sig_sq_ag1 + sig_sq_ag2)
            sig_sq_bi_avg = 0.5 * (sig_sq_bi1 + sig_sq_bi2)
            sig_sq_avg = 0.5 * (sig_sq_ag_avg + sig_sq_bi_avg)
            res += f'%0.10f %0.10f %0.10f ' % (sig_sq_ag_avg, sig_sq_bi_avg, sig_sq_avg)

    if delta_d:
        delta_d_ag1 = bg.delta_d(geo, corners_ag1, shifts_ag1, center_ag1)
        delta_d_ag2 = bg.delta_d(geo, corners_ag2, shifts_ag2, center_ag2)
        delta_d_bi1 = bg.delta_d(geo, corners_bi1, shifts_bi1, center_bi1)
        delta_d_bi2 = bg.delta_d(geo, corners_bi2, shifts_bi2, center_bi2)
        if debug:
            print(f'Delta d for %s' % geo)
            print(delta_d_ag1)
            print(delta_d_ag2)
            print(delta_d_bi1)
            print(delta_d_bi2)
        else:
            delta_d_ag_avg = 0.5 * (delta_d_ag1 + delta_d_ag2)
            delta_d_bi_avg = 0.5 * (delta_d_bi1 + delta_d_bi2)
            delta_d_avg = 0.5 * (delta_d_ag_avg + delta_d_bi_avg)
            res += f'%0.10f %0.10f %0.10f ' % (delta_d_ag_avg, delta_d_bi_avg, delta_d_avg)

    if spin_sp:
        spin_splits = ""
        for j in range(1, 7):
            spin_splits += bbo.band_info(folder, f'band100%d.out' % j, spin_splitting=True, verbose=False) + " "
        res += spin_splits

    if len(res) > 1:
        print(res.strip())

disturbs = ["5/", "10/", "15/", "20/"]

for dist in disturbs:
    break
    # print(dist)
    temp = folder + dist
    for i in range(10):
        current = temp + str(i) + "/"
        for j in range(9, 10):
            # band = "band100" + str(j) + ".out"
            results = ""
            for k in range(8):
                results += str(bg.angle_info(current + "geometry.in", betas[k], shifts[k], directions[k])[2]) + " "
                # print(f'%.10f' % (res[0]))
            print(results)
            # print(f'%0.10f' % bg.delta_d(current + "geometry.in", center_bi2, corners_sig_bi2, debug=False))
            # print(f'%0.10f' % bg.sigma_squared(current + "geometry.in", center_bi2, corners_sig_bi2, debug=False))
            # bbo.band_info(current, band, band_gap=True, spin_splitting=True, verbose=False)

# pt.correlation_plot()

# 05/09/2024
base = "../../FHI-aims/French_NMR/TA_theoretical/TA_construction/"
one = base + "one_c2.in"
two = base + "two_c2.in"
three = base + "three_c2.in"
temp = base + "s4.in"

# Geometry.combine(one, two, temp, 27, 37)
# Geometry.combine(temp, three, temp, 64, 36)
# bg.recenter(temp, temp, 1, 0, 0, 0)

# folder = "../../FHI-aims/Yi/S_S_Mixing/R_S/exp_bands_w_restart/"
# folder = "../../FHI-aims/Yi/Yi_1_5_D/n_4_6/bands/experimental/"

for i in range(1, 5):
    band = "band100" + str(i) + ".out"
    # print(bbo.band_info(folder, band, band_gap=True, spin_splitting=False, verbose=False))

theo = 0
if not theo:
    extra = "experimental"
else:
    extra = "theoretical"
folder = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_4_6_" + extra
file = folder + "/settings_plane.in"
# pt.mulliken_plot(file, alt_geo=f'%s%s' % (folder, "/../plane_geos/n_4_6_" + extra), save=False)

# 05/09/2024
# produce all figures for 1.5D project:
# settings
structure = "n_4_6"

adjacency = [[1, 6, 8], [7, 9], [3, 4, 10], [5, 11], [6, 5], [7], [7],
             [], [9, 10], [11], [11], []]
pathway_exp = [[0, 0.5, 0, 0, 0, 0],
           [-0.42151859, 0.21853893, -0.41079894, 0, 0, 0],
           [0, 0, 0, -0.42151859, -0.22182749, -0.41079894],
           [0, 0, 0, 0.3313480044, 0, 0.4298806893],
           [0, 0, 0, -0.08894081792, 0, 0.5188215072]]
pathway_theo = [[0.00000428, 0.5, 0.00000048, 0, 0, 0],
                [0.34988313, -0.19177205, 0.39008527, 0, 0, 0],
                [0, 0, 0, -0.34988641, -0.19177503, -0.39008563],
                [0, 0, 0, 0.40586882, -0.01768898, 0.37249828],
                [0, 0, 0, -0.07563055, 0.00000003, 0.52375896]]

# 3D BZ visuals
corner_file = f'../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/%s_experimental/BZ_corners.in' % structure
corners = np.asarray(bf.read_BZ_corners(corner_file))
names = [['1', 'Γ'], ['2', 'Γ'], ['Γ', '3'], ['Γ', '4'], ['Γ', '5']]
# geo_file = f'../../FHI-aims/Yi/Yi_1_5_D/Results/New_Results/%s/experimental/geometry.in' % structure
geo_file = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_4_6_experimental/geometry.in"
file = f'../../FHI-aims/Yi/Yi_1_5_D/All_Figures/%s/experimental/BZ.png' % structure
# pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway_exp, names, save=True, filename=file)

corner_file = f'../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/%s_theoretical/BZ_corners.in' % structure
corners = np.asarray(bf.read_BZ_corners(corner_file))
# geo_file = f'../../FHI-aims/Yi/Yi_1_5_D/Results/New_Results/%s/theoretical/geometry.in' % structure
geo_file = "../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/n_4_6_theoretical/geometry.in"
file = f'../../FHI-aims/Yi/Yi_1_5_D/All_Figures/%s/theoretical/BZ.png' % structure
# pt.plot_3d_solid_with_path_and_names(geo_file, corners, adjacency, pathway_theo, names, save=True, filename=file)

# dos_shifts = [2.15, 2.13] # shifts for n=2, m=4
# dos_shifts = [0.26, 1.3]  # shifts for n=3, m=3
# dos_shifts = [1.2, 1.25] # shifts for n=4, m=
# dos_shifts = [1.98, 2.2] # shifts for n=5, m=5
# dos_shifts = [2.0, 1.85]  # shifts for n=4, m=6

# dos plots
i = 0
for model in ["experimental", "theoretical"]:
    dos_folder = f'../../FHI-aims/Yi/Yi_1_5_D/n_4_6/bands/%s/' % model
    file = f'../../FHI-aims/Yi/Yi_1_5_D/All_Figures/%s/%s/dos.png' % (structure, model)
    title = f'%s %s' % (structure, model)
    # pt.dos_plot(dos_folder, shift=dos_shifts[i], limits=[-1, 4], save=True, title=title, filename=file)
    i += 1

# normal band plots
for model in ["experimental", "theoretical"]:
    bands_folder = f'../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/%s_%s/' % (structure, model)
    settings = bands_folder + "settings_final.in"
    # pt.mulliken_plot(settings, save=True)

# plane projected band plots
for model in ["experimental", "theoretical"]:
    bands_folder = f'../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/%s_%s/' % (structure, model)
    settings = bands_folder + "settings_plane.in"
    alt_geo = f'%s../plane_geos/%s_%s/' % (bands_folder, structure, model)
    # pt.mulliken_plot(settings, alt_geo=alt_geo, save=True)

structures = ["n_3_", "n_4_", "n_5_", "n_4_6_"]
for structure in structures:
    for model in ["theoretical", "experimental"]:
        bands_folder = f'../../FHI-aims/Yi/Yi_1_5_D/band_plotting_folder/%s%s/' % (structure, model)
        ots.fix_setting_colors(bands_folder)
        settings = bands_folder + "settings_new_plane.in"
        alt_geo = f'%s../plane_geos/%s%s/' % (bands_folder, structure, model)
        # pt.mulliken_plot(settings, alt_geo=alt_geo, save=True)

NH2 = [1, 116, 2, 105, 3, 96, 4, 85, 5, 78, 6, 71]
CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
                    72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]

# atom dict for TA + 6x I-
# pt.NMR_density("../../FHI-aims/French_NMR/stepX/NMR_I_6/", atom_dict)

# atom dict for TA + 4 I- + 1 I3-
# atom_dict[0] = [1, 116, 2, 105, 3, 96, 4, 85, 5, 78, 71]
# pt.NMR_density("../../FHI-aims/French_NMR/stepX/NMR_I_5/", atom_dict)

# atom dict for TA
# atom_dict[0] = [116, 105, 96, 85, 78, 71]
# atom_dict = [[x - 12 for x in part] for part in atom_dict]
# pt.NMR_density("../../FHI-aims/French_NMR/NMR_results/TA_NMR/", atom_dict)

# atom dict for TA + 1 I-
# atom_dict[0] = [116, 105, 96, 85, 78, 71]
# atom_dict = [[x - 10 for x in part] for part in atom_dict]
# atom_dict[0] += [7]
# pt.NMR_density("../../FHI-aims/French_NMR/NMR_results/TAI_NMR/", atom_dict)

# atom dict for TA + 1 I3-
# atom_dict[0] = [116, 105, 96, 85, 78, 71]
# atom_dict = [[x - 8 for x in part] for part in atom_dict]
# atom_dict[0] += [9]
# pt.NMR_density("../../FHI-aims/French_NMR/NMR_results/TAI3_NMR/", atom_dict)

# atom dict for TA + 3 I3-
# atom_dict[0] = [116, 105, 96, 85, 78, 71, 10, 11, 12]
# pt.NMR_density("../../FHI-aims/French_NMR/step3/NMR/I3/", atom_dict)

# atom dict for DMF
# atom_dict = [[9, 10, 11], [6, 7, 8], [12]]
# pt.NMR_density("../../FHI-aims/French_NMR/DMF/Shield_exp/", atom_dict)

#################### Info for FA ####################
# 1H info
# folder = "../../FHI-aims/French_NMR/FA/FA/NMR/"
# atom_dict = [[[1]], [[4, 5]], [[7]]]
# color_dict = ['r', 'g', 'b']
# type = 'H'
# xlim = [-9.5, 0.5]

# 13C info
# folder = "../../FHI-aims/French_NMR/FA/FA/NMR_C/"
# atom_dict = [[[2]]]
# color_dict = ['b']
# type = 'C'
# xlim = [-160, -157]

# 15N info
# folder = "../../FHI-aims/French_NMR/FA/FA/NMR_N/"
# atom_dict = [[[3]], [[6]]]
# color_dict = ['r', 'b']
# type = 'N'
# xlim = [-260, -90]

#################### Info for FAI ####################
# 1H info
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR/"
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR_other/"
# atom_dict = [[[1]], [[4, 5]], [[7, 8]]]
# color_dict = ['r', 'g', 'b']
# type = 'H'
# xlim = [-11, 0.5]

# 13C info
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR_C/"
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR_C_other/"
# atom_dict = [[[2]]]
# color_dict = ['forestgreen']
# type = 'C'
# xlim = [-165, -160]

# 15N info
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR_N/"
# folder = "../../FHI-aims/French_NMR/FA/FAI/NMR_N_other/"
# atom_dict = [[[3]], [[6]]]
# color_dict = ['forestgreen', 'b']
# type = 'N'
# xlim = [230, 270]

#################### Info for my TA ####################
# folder = "../../FHI-aims/French_NMR/TA_MD/MD_NMR/"
# NH2 = [18, 33, 55, 70, 91, 105]
# CH2 = [20, 21, 35, 36, 72, 73, 57, 58, 93, 94, 107, 108]
# Benzene = [24, 26, 29, 31, 61, 63, 66, 68, 97, 99, 101, 103]
# Cyclohexane = [2, 3, 5, 6, 8, 10, 12, 13, 15, 16,
#                39, 40, 42, 43, 45, 47, 49, 50, 52, 53,
#                75, 76, 78, 79, 81, 83, 85, 86, 88, 89]
# atom_dict = [NH2, CH2, Benzene, Cyclohexane]
# new_atom_dict = [[[atom_dict[0][0]], [atom_dict[0][1]], [atom_dict[0][2]],
#                  [atom_dict[0][3]], [atom_dict[0][4]], [atom_dict[0][5]]],
#
#                  [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
#                  atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],
#
#                  [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],
#
#                  [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
# color_dict = ['r', 'c', 'b', 'g']
# type = 'H'
# xlim = [-9, 0]

#################### Info for crystal TA ####################
# 1H info
# folder = "../../FHI-aims/French_NMR/TA_crystal/NMR/"
# NH2 = [1, 116, 2, 105, 3, 96, 4, 85, 5, 78, 6, 71]
# CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
# Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
# Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#                     72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
# atom_dict = [NH2, CH2, Benzene, Cyclohexane]
# atom_dict[0] = [116, 105, 96, 85, 78, 71]
# atom_dict = [[x - 12 for x in part] for part in atom_dict]
# new_atom_dict = [[[atom_dict[0][0]], [atom_dict[0][1]], [atom_dict[0][2]],
#                  [atom_dict[0][3]], [atom_dict[0][4]], [atom_dict[0][5]]],
#
#                  [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
#                  atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],
#
#                  [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],
#
#                  [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
# color_dict = ['r', 'c', 'b', 'g']
# type = 'H'
# xlim = [-9, 0]

# 13C info
# folder = "../../FHI-aims/French_NMR/TA_crystal/NMR_C/"
# CH2 = [[9], [14], [17], [24], [31], [36]]
# Benzene = [[10, 11, 12, 13, 43, 44],
#            [18, 19, 20, 21, 22, 23],
#            [32, 33, 34, 35, 37, 38]]
# Cyclohexane = [[7, 8, 45, 46, 47, 48],
#                [15, 16, 39, 40, 41, 42],
#                [25, 26, 27, 28, 29, 30]]
# atom_dict = [CH2, Benzene, Cyclohexane]
# color_dict = ['c', 'b', 'g']
# type = 'C'
# xlim = [-150, 0]

# 15N info
# folder = "../../FHI-aims/French_NMR/TA_crystal/NMR_N/"
# atom_dict = [[[1]], [[2]], [[3]], [[4]], [[5]], [[6]]]
# color_dict = ['r', 'orange', 'y', 'g', 'b', 'purple']
# type = 'N'
# xlim = [300, 325]

#################### Info for TMS ####################
# 1H info
# folder = "../../FHI-aims/French_NMR/random/TMS_work/TMS_MD/NMR/"
# folder = "../../FHI-aims/French_NMR/random/TMS_work/TMS_MD/NMR_dense/TMS_NMR_dense/"
# atom_dict = [[[6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]]]
# color_dict = ['r']
# type = 'H'
# xlim = [30, 32]


# 13C info
# folder = "../../FHI-aims/French_NMR/random/TMS_work/TMS_MD/NMR/"
# folder = "../../FHI-aims/French_NMR/random/TMS_work/TMS_MD/NMR_dense/TMS_NMR_dense/"
# atom_dict = [[[2], [3], [4], [5]]]
# color_dict = ['r']
# type = 'C'
# xlim = [175, 180]

#################### Info for TA + 6I ####################
# 1H info
# folder = "../../FHI-aims/French_NMR/stepX/I6/NMR_I6_new/"
# NH2 = [1, 116, 2, 105, 3, 96, 4, 85, 5, 78, 6, 71]
# CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
# Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
# Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#                72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
# atom_dict = [NH2, CH2, Benzene, Cyclohexane]
# atom_dict = [[atom_dict[0][0:2], atom_dict[0][2:4], atom_dict[0][4:6],
#               atom_dict[0][6:8], atom_dict[0][8:10], atom_dict[0][10:]],
#
#              [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
#               atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],
#
#              [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],
#
#              [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
# color_dict = ['r', 'c', 'b', 'g']
# type = 'H'
# xlim = [-14, 0]

pt.NMR_average(folder, atom_dict, color_dict, width=0.005, xlim=xlim, type=type)

#################### Info for TA + 3H + 3I3 ####################
# 1H info
folder = "../../FHI-aims/French_NMR/step3/I3/NMR/"
NH2 = [10, 116, 11, 96, 12, 78, 71, 85, 105]
CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
               72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [[[10, 105, 116], [12, 71, 78], [11, 85, 96]],

             [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
              atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

             [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

             [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-9, 0]

# pt.NMR_average(folder, atom_dict, color_dict, width=0.005, xlim=xlim, type=type)

#################### Info for TA + 3H + 1I3 + 2I ####################
# 1H info
folder = "../../FHI-aims/French_NMR/step3/I3/2I_I3/NMR/"
NH2 = [10, 116, 11, 96, 12, 78, 71, 85, 105]
CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
               72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [[val - 4 for val in sset] for sset in atom_dict]
atom_dict = [[atom_dict[0][0:2], atom_dict[0][2:4], atom_dict[0][4:6],
              [atom_dict[0][6]], [atom_dict[0][7]], [atom_dict[0][8]]],

             [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
              atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

             [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

             [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-14, 0]

# pt.NMR_average(folder, atom_dict, color_dict, width=0.005, xlim=xlim, type=type)

#################### Info for TA + 1H + 1I3 ####################
# 1H info
folder = "../../FHI-aims/French_NMR/I3/NMR/"
NH2 = [17, 71, 116, 96, 78, 85, 105]
CH2 = [63, 64, 103, 104, 97, 98, 83, 84, 79, 80, 69, 70]
Benzene = [65, 66, 67, 68, 99, 100, 101, 102, 61, 62, 81, 82]
Cyclohexane = [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
               72, 73, 74, 75, 76, 77, 117, 118, 119, 120]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [[val - 8 for val in sset] for sset in atom_dict]
atom_dict = [  # [atom_dict[0][0:2], [atom_dict[0][2]], [atom_dict[0][3]],
    # [atom_dict[0][4]], [atom_dict[0][5]], [atom_dict[0][6]]],
    [[9, 63, 70], [atom_dict[0][2]], [atom_dict[0][3]],
     [atom_dict[0][5]], [atom_dict[0][6]]],

    [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
     atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

    [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

    [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-8.5, 0]

#################### Info for my TA  + 6H + 6I- ####################
folder = "../../FHI-aims/French_NMR/new_multi/NMR/6I/"
NH2 = [1 - 12, 2 - 12, 3 - 12, 4 - 12, 5 - 12, 6 - 12, 18, 33, 55, 70, 91, 105]
NH2 = [x + 12 for x in NH2]
CH2 = [20, 21, 35, 36, 72, 73, 57, 58, 93, 94, 107, 108]
CH2 = [x + 12 for x in CH2]
Benzene = [24, 26, 29, 31, 61, 63, 66, 68, 97, 99, 101, 103]
Benzene = [x + 12 for x in Benzene]
Cyclohexane = [2, 3, 5, 6, 8, 10, 12, 13, 15, 16,
               39, 40, 42, 43, 45, 47, 49, 50, 52, 53,
               75, 76, 78, 79, 81, 83, 85, 86, 88, 89]
Cyclohexane = [x + 12 for x in Cyclohexane]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [[atom_dict[0][0:2], atom_dict[0][2:4], atom_dict[0][4:6],
              atom_dict[0][6:8], atom_dict[0][8:10], atom_dict[0][10:]],

                 [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
                 atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

                 [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

                 [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-14, 0]

#################### Info for my TA  + 3H + 3 I3- ####################
folder = "../../FHI-aims/French_NMR/new_multi/NMR/I3/mix/"
offset = 12
NH2 = [1 - offset, 2 - offset, 3 - offset, 18, 33, 55, 70, 91, 105]
NH2 = [x + offset for x in NH2]
CH2 = [20, 21, 35, 36, 72, 73, 57, 58, 93, 94, 107, 108]
CH2 = [x + offset for x in CH2]
Benzene = [24, 26, 29, 31, 61, 63, 66, 68, 97, 99, 101, 103]
Benzene = [x + offset for x in Benzene]
Cyclohexane = [2, 3, 5, 6, 8, 10, 12, 13, 15, 16,
               39, 40, 42, 43, 45, 47, 49, 50, 52, 53,
               75, 76, 78, 79, 81, 83, 85, 86, 88, 89]
Cyclohexane = [x + offset for x in Cyclohexane]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [[[1, 30, 45], [2, 67, 82], [3, 103, 117]],

             [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
              atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

             [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

             [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-14, 0]

#################### Info for my TA  + 3H + 3 I5- ####################
folder = "../../FHI-aims/French_NMR/new_multi/NMR/I5/all/"
offset = 18
NH2 = [1 - offset, 2 - offset, 3 - offset, 18, 33, 55, 70, 91, 105]
NH2 = [x + offset for x in NH2]
CH2 = [20, 21, 35, 36, 72, 73, 57, 58, 93, 94, 107, 108]
CH2 = [x + offset for x in CH2]
Benzene = [24, 26, 29, 31, 61, 63, 66, 68, 97, 99, 101, 103]
Benzene = [x + offset for x in Benzene]
Cyclohexane = [2, 3, 5, 6, 8, 10, 12, 13, 15, 16,
               39, 40, 42, 43, 45, 47, 49, 50, 52, 53,
               75, 76, 78, 79, 81, 83, 85, 86, 88, 89]
Cyclohexane = [x + offset for x in Cyclohexane]
atom_dict = [NH2, CH2, Benzene, Cyclohexane]
atom_dict = [  # [[1, 36, 51], [2, 73, 88], [3, 109, 123]],
    [[1], [36], [51], [2], [73], [88], [3], [109], [123]],
    [atom_dict[1][0:2], atom_dict[1][2:4], atom_dict[1][4:6],
     atom_dict[1][6:8], atom_dict[1][8:10], atom_dict[1][10:]],

    [atom_dict[2][0:4], atom_dict[2][4:8], atom_dict[2][8:]],

    [atom_dict[3][0:10], atom_dict[3][10:20], atom_dict[3][20:]]]
color_dict = ['r', 'c', 'b', 'g']
type = 'H'
xlim = [-11, 0]

pt.NMR_average(folder, atom_dict, color_dict, width=0.005, xlim=xlim, type=type)

base_angle = 180
angles = [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20]
directories = ["00.0/", "02.5/", "05.0/", "07.5/", "10.0/", "12.5/", "15.0/", "17.5/", "20.0/"]
base = "../../FHI-aims/Double_Perovskites/New_Structures/AgBi/structures/" + str(base_angle) + ".in"
for count, angle in enumerate(angles):
    ang1 = (base_angle + angle / 2) * math.pi / 180
    ang2 = (base_angle - angle / 2) * math.pi / 180
    write = "../../FHI-aims/Double_Perovskites/New_Structures/AgBi/bands/" + str(base_angle) + "/" + \
            directories[count] + "geometry.in"
    print(write)
    M24.induce_delta_beta(base, write, ang1, ang2)

    test = write
    print(round(bg.angle_info(test, (1, 7, 4), -1)[0], 4))
    print(round(bg.angle_info(test, (4, 8, 1), [[0, 0, 0], [0, 0, 0], [0, 1, 0]])[0], 4))
    print(round(bg.angle_info(test, (4, 9, 1), [[0, 0, 0], [0, 0, 0], [1, 1, 0]])[0], 4))
    print(round(bg.angle_info(test, (4, 10, 1), [[0, 0, 0], [0, 0, 0], [1, 0, 0]])[0], 4))

